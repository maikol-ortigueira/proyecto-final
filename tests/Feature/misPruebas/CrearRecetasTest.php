<?php

namespace Tests\Feature\misPruebas;

use App\Models\Categoria;
use App\Models\Etiqueta;
use App\Models\Ingrediente;
use App\Models\Receta;
use App\Models\Rol;
use App\Models\Unidad;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CrearRecetasTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub

        // Creamos el rol superadmin
        $rol = Rol::factory()->create(['nombre' => 'superadmin']);
        // Creamos un usuario
        $user = User::factory()->create();
        // Le asignamos el rol de superadmin para poder acceder al backend
        $user->roles()->sync($rol);

        // Actuamos como este usuario
        $this->actingAs($user);

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_se_puede_acceder_a_la_pagina_de_alta_de_recetas()
    {
        // Ir a la pÃ¡gina de crear etiquetas
        $response = $this->get('/admin/recetas/crear');

        // Comprobar que accede a la pÃ¡gina
        $response->assertStatus(200);
    }

    public function test_se_puede_crear_una_receta ()
    {
        $this->withoutExceptionHandling();
        $this->artisan('db:seed --class CategoriaSeeder');
        $this->artisan('db:seed --class UnidadSeeder');

        // Crear una categoria
        $categoria = Categoria::factory(1)->create(['type' => Receta::class]);

        // Crear varias etiqueta
        $etiquetas = Etiqueta::factory(3)->create();

        // crear varios ingredientes
        $ingredientes = Ingrediente::factory(3)->create();
        //dd($categoria[0]->id);
        $response = $this->post('/admin/recetas', [
            'nombre' => 'test',
            'descripcion' => 'test descripcion',
            'raciones' => 4,
            'categoria' => $categoria[0]->id,
            'etiquetas' => array()
        ]);

        // Recuperar la receta creada
        $receta = Receta::first();

        // Comprobar que existe solo una receta en la base de datos
        $this->assertEquals(1, Receta::count());

        $this->assertEquals('test', $receta->nombre);
        $this->assertEquals('test descripcion', $receta->descripcion);
        $this->assertEquals(4, $receta->raciones);
        $this->assertEquals($categoria[0]->id, $receta->categoria_id);

        $response->assertRedirect('/admin/recetas');
    }
}
